// <auto-generated />
using System;
using CRUDApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUDApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20240130150853_CreateDb1")]
    partial class CreateDb1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRUDApi.Entities.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacultyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CRUDApi.Entities.CourseSemester", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SemesterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("SemesterId");

                    b.ToTable("CourseSemesters");
                });

            modelBuilder.Entity("CRUDApi.Entities.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacultyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CRUDApi.Entities.Lecture", b =>
                {
                    b.Property<string>("LectureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCycleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LectureId");

                    b.HasIndex("CourseCycleId");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("CRUDApi.Entities.LectureFile", b =>
                {
                    b.Property<int>("LectureFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LectureFileId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LectureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LectureFileId");

                    b.HasIndex("LectureId");

                    b.ToTable("LectureFiles");
                });

            modelBuilder.Entity("CRUDApi.Entities.Question", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CRUDApi.Entities.QuestionAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AnswerNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("CRUDApi.Entities.Quiz", b =>
                {
                    b.Property<string>("QuizId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCycleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizId");

                    b.HasIndex("CourseCycleId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("CRUDApi.Entities.QuizAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionAnswersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionAnswersId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizAnswers");
                });

            modelBuilder.Entity("CRUDApi.Entities.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("CRUDApi.Entities.Semester", b =>
                {
                    b.Property<string>("SemesterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FacultyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Years")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SemesterId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("CRUDApi.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CRUDApi.Entities.StudentEnrollment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCycleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseCycleId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentEnrollments");
                });

            modelBuilder.Entity("CRUDApi.Entities.StudentInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Gpa")
                        .HasColumnType("float");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentInfos");
                });

            modelBuilder.Entity("CRUDApi.Entities.StudentQuizGrade", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.Property<string>("QuizId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StudentUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("StudentQuizGrades");
                });

            modelBuilder.Entity("CRUDApi.Entities.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseCycleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Grade")
                        .HasColumnType("float");

                    b.Property<string>("InstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.HasIndex("CourseCycleId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("CRUDApi.Entities.TaskAnswer", b =>
                {
                    b.Property<string>("TaskAnswerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TaskId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TaskAnswerId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAnswers");
                });

            modelBuilder.Entity("CRUDApi.Entities.University", b =>
                {
                    b.Property<string>("UniversityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("CRUDApi.Entities.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacultyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("CRUDApi.Entities.CourseSemester", b =>
                {
                    b.HasOne("CRUDApi.Entities.Course", "Course")
                        .WithMany("CourseSemesters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUDApi.Entities.User", "Instructor")
                        .WithMany("CourseSemesters")
                        .HasForeignKey("InstructorId");

                    b.HasOne("CRUDApi.Entities.Semester", "Semester")
                        .WithMany("CourseSemesters")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("CRUDApi.Entities.Lecture", b =>
                {
                    b.HasOne("CRUDApi.Entities.CourseSemester", "CourseCycle")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseCycle");
                });

            modelBuilder.Entity("CRUDApi.Entities.LectureFile", b =>
                {
                    b.HasOne("CRUDApi.Entities.Lecture", "Lecture")
                        .WithMany("LectureFiles")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("CRUDApi.Entities.Question", b =>
                {
                    b.HasOne("CRUDApi.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("CRUDApi.Entities.QuestionAnswer", b =>
                {
                    b.HasOne("CRUDApi.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CRUDApi.Entities.Quiz", b =>
                {
                    b.HasOne("CRUDApi.Entities.CourseSemester", "CourseCycle")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseCycleId");

                    b.HasOne("CRUDApi.Entities.User", "Instructor")
                        .WithMany("Quizzes")
                        .HasForeignKey("InstructorId");

                    b.Navigation("CourseCycle");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CRUDApi.Entities.QuizAnswer", b =>
                {
                    b.HasOne("CRUDApi.Entities.QuestionAnswer", "QuestionAnswers")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuestionAnswersId");

                    b.HasOne("CRUDApi.Entities.User", "Student")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("StudentId");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CRUDApi.Entities.StudentEnrollment", b =>
                {
                    b.HasOne("CRUDApi.Entities.CourseSemester", "CourseCycle")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("CourseCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUDApi.Entities.User", "Student")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("StudentUserId");

                    b.Navigation("CourseCycle");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CRUDApi.Entities.StudentInfo", b =>
                {
                    b.HasOne("CRUDApi.Entities.Department", "Department")
                        .WithMany("StudentInfos")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("CRUDApi.Entities.User", "User")
                        .WithMany("StudentInfos")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Entities.StudentQuizGrade", b =>
                {
                    b.HasOne("CRUDApi.Entities.Quiz", "Quiz")
                        .WithMany("StudentQuizGrades")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUDApi.Entities.User", "Student")
                        .WithMany("StudentQuizGrades")
                        .HasForeignKey("StudentUserId");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CRUDApi.Entities.Task", b =>
                {
                    b.HasOne("CRUDApi.Entities.CourseSemester", "CourseCycle")
                        .WithMany("Tasks")
                        .HasForeignKey("CourseCycleId");

                    b.HasOne("CRUDApi.Entities.User", "Instructor")
                        .WithMany("Tasks")
                        .HasForeignKey("InstructorId");

                    b.Navigation("CourseCycle");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CRUDApi.Entities.TaskAnswer", b =>
                {
                    b.HasOne("CRUDApi.Entities.User", "Student")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("StudentId");

                    b.HasOne("CRUDApi.Entities.Task", "Task")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("TaskId");

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("CRUDApi.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUDApi.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRUDApi.Entities.Course", b =>
                {
                    b.Navigation("CourseSemesters");
                });

            modelBuilder.Entity("CRUDApi.Entities.CourseSemester", b =>
                {
                    b.Navigation("Lectures");

                    b.Navigation("Quizzes");

                    b.Navigation("StudentEnrollments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CRUDApi.Entities.Department", b =>
                {
                    b.Navigation("StudentInfos");
                });

            modelBuilder.Entity("CRUDApi.Entities.Lecture", b =>
                {
                    b.Navigation("LectureFiles");
                });

            modelBuilder.Entity("CRUDApi.Entities.Question", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("CRUDApi.Entities.QuestionAnswer", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("CRUDApi.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentQuizGrades");
                });

            modelBuilder.Entity("CRUDApi.Entities.Semester", b =>
                {
                    b.Navigation("CourseSemesters");
                });

            modelBuilder.Entity("CRUDApi.Entities.Task", b =>
                {
                    b.Navigation("TaskAnswers");
                });

            modelBuilder.Entity("CRUDApi.Entities.User", b =>
                {
                    b.Navigation("CourseSemesters");

                    b.Navigation("QuizAnswers");

                    b.Navigation("Quizzes");

                    b.Navigation("StudentEnrollments");

                    b.Navigation("StudentInfos");

                    b.Navigation("StudentQuizGrades");

                    b.Navigation("TaskAnswers");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
