// <auto-generated />
using System;
using CRUDApi.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRUDApi.Migrations
{
    [DbContext(typeof(LMSContext))]
    [Migration("20240216143412_V1")]
    partial class V1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRUDApi.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentUserRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CRUDApi.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FacultyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faculty_ID");

                    b.Property<int?>("Hours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("hours")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("CourseId")
                        .HasName("PK__Course__8F1FF3A6DB1504CD");

                    b.HasIndex("FacultyId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("CRUDApi.Models.CourseSemester", b =>
                {
                    b.Property<string>("CycleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cycle_ID");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Course_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SemesterId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Semester_ID");

                    b.HasKey("CycleId")
                        .HasName("PK__Course_s__5D924C1901EB9452");

                    b.HasIndex("CourseId");

                    b.HasIndex("SemesterId");

                    b.ToTable("Course_semester");
                });

            modelBuilder.Entity("CRUDApi.Models.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("department_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FacultyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faculty_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("DepartmentId")
                        .HasName("PK__Departme__C22220EA01691B04");

                    b.HasIndex("FacultyId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("CRUDApi.Models.Faculty", b =>
                {
                    b.Property<string>("FacultyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faculty_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LastSemesterId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_semester_ID");

                    b.Property<int>("Levels")
                        .HasColumnType("int")
                        .HasColumnName("levels");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Logo_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("UniversityId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("university_ID");

                    b.HasKey("FacultyId")
                        .HasName("PK__Faculty__7B06AD84DD5251FD");

                    b.HasIndex("LastSemesterId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculty");
                });

            modelBuilder.Entity("CRUDApi.Models.InstructorCourseSemester", b =>
                {
                    b.Property<string>("CourseCycleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_cycle_ID");

                    b.Property<string>("InstructorId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("instructor_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CourseCycleId", "InstructorId")
                        .HasName("PK__instruct__A27700A8CD14256D");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorCourseSemester");
                });

            modelBuilder.Entity("CRUDApi.Models.Lecture", b =>
                {
                    b.Property<string>("LectureId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lecture_ID");

                    b.Property<string>("CourseCycleId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_cycle_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("LectureId")
                        .HasName("PK__Lecture__797923ED7F7AD417");

                    b.HasIndex("CourseCycleId");

                    b.ToTable("Lecture");
                });

            modelBuilder.Entity("CRUDApi.Models.LectureFile", b =>
                {
                    b.Property<int>("LectureFileId")
                        .HasColumnType("int")
                        .HasColumnName("Lecture_file_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("LectureId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lecture_ID");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.HasKey("LectureFileId")
                        .HasName("PK__Lecture___69F00415E4FDD298");

                    b.HasIndex("LectureId");

                    b.ToTable("LectureFile");
                });

            modelBuilder.Entity("CRUDApi.Models.News", b =>
                {
                    b.Property<string>("NewsId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("news_ID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FacultyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faculty_ID");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_ID");

                    b.HasKey("NewsId")
                        .HasName("PK__news__4C22D9E0E1CE1E8E");

                    b.HasIndex("FacultyId");

                    b.HasIndex("UserId");

                    b.ToTable("news");
                });

            modelBuilder.Entity("CRUDApi.Models.Question", b =>
                {
                    b.Property<string>("QuestionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("question_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Grade")
                        .HasColumnType("float")
                        .HasColumnName("grade");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int")
                        .HasColumnName("question_number");

                    b.Property<string>("QuizId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("quiz_ID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__2EC9C0317399D9F2");

                    b.HasIndex("QuizId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("CRUDApi.Models.QuestionAnswer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("answer_ID");

                    b.Property<int>("AnswerNumber")
                        .HasColumnType("int")
                        .HasColumnName("answer_number");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit")
                        .HasColumnName("is_correct");

                    b.Property<string>("QuestionId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("question_ID");

                    b.Property<string>("Text")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("text");

                    b.HasKey("AnswerId")
                        .HasName("PK__Question__33714700833E0B49");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswer");
                });

            modelBuilder.Entity("CRUDApi.Models.Quiz", b =>
                {
                    b.Property<string>("QuizId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("quiz_ID");

                    b.Property<string>("CourseCycleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_cycle_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<double?>("Grade")
                        .HasColumnType("float")
                        .HasColumnName("grade");

                    b.Property<string>("InstructorId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("instructor_ID");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("QuizId")
                        .HasName("PK__Quiz__2D7357F4EB5FE8D8");

                    b.HasIndex("CourseCycleId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Quiz");
                });

            modelBuilder.Entity("CRUDApi.Models.QuizAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .HasColumnType("int")
                        .HasColumnName("answer_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("QuestionAnswersId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("question_answers_ID");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_ID");

                    b.HasKey("AnswerId")
                        .HasName("PK__Quiz_ans__33714700A3212EA6");

                    b.HasIndex("QuestionAnswersId");

                    b.HasIndex("StudentId");

                    b.ToTable("QuizAnswer");
                });

            modelBuilder.Entity("CRUDApi.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__760F998498577A3D");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CRUDApi.Models.Semester", b =>
                {
                    b.Property<string>("SemesterId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Semester_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_Date");

                    b.Property<string>("FacultyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faculty_ID");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_Date");

                    b.Property<string>("Years")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("years");

                    b.HasKey("SemesterId")
                        .HasName("PK__Semester__12459B949BF7782D");

                    b.HasIndex("FacultyId");

                    b.ToTable("Semester");
                });

            modelBuilder.Entity("CRUDApi.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__student__3213E83FDCFE20BD");

                    b.ToTable("student");
                });

            modelBuilder.Entity("CRUDApi.Models.StudentEnrollment", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_ID");

                    b.Property<string>("CourseCycleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_cycle_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StudentId", "CourseCycleId")
                        .HasName("PK__Student___718E812A36167AA0");

                    b.HasIndex("CourseCycleId");

                    b.ToTable("StudentEnrollment");
                });

            modelBuilder.Entity("CRUDApi.Models.StudentInfo", b =>
                {
                    b.Property<string>("AcademicId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("academic_ID");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("department_ID");

                    b.Property<double?>("Gpa")
                        .HasColumnType("float")
                        .HasColumnName("gpa");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_ID");

                    b.HasKey("AcademicId")
                        .HasName("PK__Student___CE78F2BC1C1D708B");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentInfo");
                });

            modelBuilder.Entity("CRUDApi.Models.StudentQuizGrade", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_ID");

                    b.Property<string>("QuizId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("quiz_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("Grade")
                        .HasColumnType("float")
                        .HasColumnName("grade");

                    b.HasKey("StudentId", "QuizId")
                        .HasName("PK__Student___78DF1E5DF85585A2");

                    b.HasIndex("QuizId");

                    b.ToTable("StudentQuizGrade");
                });

            modelBuilder.Entity("CRUDApi.Models.Task", b =>
                {
                    b.Property<string>("TaskId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("task_ID");

                    b.Property<string>("CourseCycleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("course_cycle_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<double?>("Grade")
                        .HasColumnType("float")
                        .HasColumnName("grade");

                    b.Property<string>("InstructorId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("instructor_ID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("TaskId")
                        .HasName("PK__Task__049318B59168F721");

                    b.HasIndex("CourseCycleId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("CRUDApi.Models.TaskAnswer", b =>
                {
                    b.Property<string>("AnswerId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("answer_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("file_path");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('PENDING')");

                    b.Property<string>("StudentId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("student_ID");

                    b.Property<string>("TaskId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("task_ID");

                    b.HasKey("AnswerId")
                        .HasName("PK__Task_ans__3371470048AD5EBA");

                    b.HasIndex("StudentId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAnswer");
                });

            modelBuilder.Entity("CRUDApi.Models.University", b =>
                {
                    b.Property<string>("UniversityId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("university_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Logo_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.HasKey("UniversityId")
                        .HasName("PK__Universi__F24EBB78CFEB19C5");

                    b.HasIndex(new[] { "Name" }, "UQ__Universi__72E12F1BD77946A1")
                        .IsUnique();

                    b.ToTable("University");
                });

            modelBuilder.Entity("CRUDApi.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_ID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FacultyId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Faculty_ID");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image_path");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('ACTIVE')");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BF33073B1E48F3");

                    b.HasIndex("FacultyId");

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E6164094D60C7")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "UQ__users__B43B145FD7D413C2")
                        .IsUnique()
                        .HasFilter("[phone] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CRUDApi.Models.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApplicationUserId" }, "IX_UserAddress_ApplicationUserId")
                        .IsUnique();

                    b.ToTable("UserAddress");
                });

            modelBuilder.Entity("CRUDApi.Models.UserRole", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_ID");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("user_ID");

                    b.HasKey("RoleId", "UserId")
                        .HasName("PK__User_rol__1D946AB40474E7D3");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("CRUDApi.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("CRUDApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("CRUDApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserRole", b =>
                {
                    b.HasOne("CRUDApi.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRUDApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUserToken", b =>
                {
                    b.HasOne("CRUDApi.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Models.Course", b =>
                {
                    b.HasOne("CRUDApi.Models.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK__Course__faculty___607251E5");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CRUDApi.Models.CourseSemester", b =>
                {
                    b.HasOne("CRUDApi.Models.Course", "Course")
                        .WithMany("CourseSemesters")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__Course_se__Cours__2739D489");

                    b.HasOne("CRUDApi.Models.Semester", "Semester")
                        .WithMany("CourseSemesters")
                        .HasForeignKey("SemesterId")
                        .IsRequired()
                        .HasConstraintName("FK__Course_se__Semes__2645B050");

                    b.Navigation("Course");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("CRUDApi.Models.Department", b =>
                {
                    b.HasOne("CRUDApi.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK__Departmen__facul__0A9D95DB");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CRUDApi.Models.Faculty", b =>
                {
                    b.HasOne("CRUDApi.Models.Semester", "LastSemester")
                        .WithMany("Faculties")
                        .HasForeignKey("LastSemesterId")
                        .HasConstraintName("FK__Faculty__last_se__6166761E");

                    b.HasOne("CRUDApi.Models.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK__Faculty__univers__06CD04F7");

                    b.Navigation("LastSemester");

                    b.Navigation("University");
                });

            modelBuilder.Entity("CRUDApi.Models.InstructorCourseSemester", b =>
                {
                    b.HasOne("CRUDApi.Models.CourseSemester", "CourseCycle")
                        .WithMany("InstructorCourseSemesters")
                        .HasForeignKey("CourseCycleId")
                        .IsRequired()
                        .HasConstraintName("FK__instructo__cours__24285DB4");

                    b.HasOne("CRUDApi.Models.User", "Instructor")
                        .WithMany("InstructorCourseSemesters")
                        .HasForeignKey("InstructorId")
                        .IsRequired()
                        .HasConstraintName("FK__instructo__instr__2334397B");

                    b.Navigation("CourseCycle");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CRUDApi.Models.Lecture", b =>
                {
                    b.HasOne("CRUDApi.Models.CourseSemester", "CourseCycle")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseCycleId")
                        .IsRequired()
                        .HasConstraintName("FK__Lecture__course___2BFE89A6");

                    b.Navigation("CourseCycle");
                });

            modelBuilder.Entity("CRUDApi.Models.LectureFile", b =>
                {
                    b.HasOne("CRUDApi.Models.Lecture", "Lecture")
                        .WithMany("LectureFiles")
                        .HasForeignKey("LectureId")
                        .IsRequired()
                        .HasConstraintName("FK__Lecture_f__lectu__2FCF1A8A");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("CRUDApi.Models.News", b =>
                {
                    b.HasOne("CRUDApi.Models.Faculty", "Faculty")
                        .WithMany("News")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK__news__faculty_ID__2EA5EC27");

                    b.HasOne("CRUDApi.Models.User", "User")
                        .WithMany("News")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__news__user_ID__2F9A1060");

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Models.Question", b =>
                {
                    b.HasOne("CRUDApi.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .HasConstraintName("FK__Questions__quiz___47A6A41B");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("CRUDApi.Models.QuestionAnswer", b =>
                {
                    b.HasOne("CRUDApi.Models.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__Question___quest__4B7734FF");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("CRUDApi.Models.Quiz", b =>
                {
                    b.HasOne("CRUDApi.Models.CourseSemester", "CourseCycle")
                        .WithMany("Quizzes")
                        .HasForeignKey("CourseCycleId")
                        .HasConstraintName("FK__Quiz__course_cyc__42E1EEFE");

                    b.HasOne("CRUDApi.Models.User", "Instructor")
                        .WithMany("Quizzes")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__Quiz__instructor__43D61337");

                    b.Navigation("CourseCycle");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CRUDApi.Models.QuizAnswer", b =>
                {
                    b.HasOne("CRUDApi.Models.QuestionAnswer", "QuestionAnswers")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuestionAnswersId")
                        .HasConstraintName("FK__Quiz_answ__quest__503BEA1C");

                    b.HasOne("CRUDApi.Models.User", "Student")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Quiz_answ__stude__4F47C5E3");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CRUDApi.Models.Semester", b =>
                {
                    b.HasOne("CRUDApi.Models.Faculty", "Faculty")
                        .WithMany("Semesters")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK__Semester__facult__22751F6C");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CRUDApi.Models.StudentEnrollment", b =>
                {
                    b.HasOne("CRUDApi.Models.CourseSemester", "CourseCycle")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("CourseCycleId")
                        .IsRequired()
                        .HasConstraintName("FK__Student_E__cours__3493CFA7");

                    b.HasOne("CRUDApi.Models.User", "Student")
                        .WithMany("StudentEnrollments")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Student_E__stude__339FAB6E");

                    b.Navigation("CourseCycle");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CRUDApi.Models.StudentInfo", b =>
                {
                    b.HasOne("CRUDApi.Models.Department", "Department")
                        .WithMany("StudentInfos")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK__Student_i__depar__17F790F9");

                    b.HasOne("CRUDApi.Models.User", "User")
                        .WithMany("StudentInfos")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Student_i__user___17036CC0");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Models.StudentQuizGrade", b =>
                {
                    b.HasOne("CRUDApi.Models.Quiz", "Quiz")
                        .WithMany("StudentQuizGrades")
                        .HasForeignKey("QuizId")
                        .IsRequired()
                        .HasConstraintName("FK__Student_Q__quiz___55009F39");

                    b.HasOne("CRUDApi.Models.User", "Student")
                        .WithMany("StudentQuizGrades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Student_Q__stude__540C7B00");

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CRUDApi.Models.Task", b =>
                {
                    b.HasOne("CRUDApi.Models.CourseSemester", "CourseCycle")
                        .WithMany("Tasks")
                        .HasForeignKey("CourseCycleId")
                        .HasConstraintName("FK__Task__course_cyc__3864608B");

                    b.HasOne("CRUDApi.Models.User", "Instructor")
                        .WithMany("Tasks")
                        .HasForeignKey("InstructorId")
                        .HasConstraintName("FK__Task__instructor__395884C4");

                    b.Navigation("CourseCycle");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("CRUDApi.Models.TaskAnswer", b =>
                {
                    b.HasOne("CRUDApi.Models.User", "Student")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK__Task_answ__stude__3E1D39E1");

                    b.HasOne("CRUDApi.Models.Task", "Task")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("FK__Task_answ__task___3D2915A8");

                    b.Navigation("Student");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("CRUDApi.Models.User", b =>
                {
                    b.HasOne("CRUDApi.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK__users__Faculty_I__1332DBDC");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("CRUDApi.Models.UserAddress", b =>
                {
                    b.HasOne("CRUDApi.Models.AspNetUser", "ApplicationUser")
                        .WithOne("UserAddress")
                        .HasForeignKey("CRUDApi.Models.UserAddress", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("CRUDApi.Models.UserRole", b =>
                {
                    b.HasOne("CRUDApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User_role__role___1AD3FDA4");

                    b.HasOne("CRUDApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__User_role__user___1BC821DD");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("CRUDApi.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("UserAddress");
                });

            modelBuilder.Entity("CRUDApi.Models.Course", b =>
                {
                    b.Navigation("CourseSemesters");
                });

            modelBuilder.Entity("CRUDApi.Models.CourseSemester", b =>
                {
                    b.Navigation("InstructorCourseSemesters");

                    b.Navigation("Lectures");

                    b.Navigation("Quizzes");

                    b.Navigation("StudentEnrollments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("CRUDApi.Models.Department", b =>
                {
                    b.Navigation("StudentInfos");
                });

            modelBuilder.Entity("CRUDApi.Models.Faculty", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Departments");

                    b.Navigation("News");

                    b.Navigation("Semesters");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CRUDApi.Models.Lecture", b =>
                {
                    b.Navigation("LectureFiles");
                });

            modelBuilder.Entity("CRUDApi.Models.Question", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("CRUDApi.Models.QuestionAnswer", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("CRUDApi.Models.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("StudentQuizGrades");
                });

            modelBuilder.Entity("CRUDApi.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CRUDApi.Models.Semester", b =>
                {
                    b.Navigation("CourseSemesters");

                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("CRUDApi.Models.Task", b =>
                {
                    b.Navigation("TaskAnswers");
                });

            modelBuilder.Entity("CRUDApi.Models.University", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("CRUDApi.Models.User", b =>
                {
                    b.Navigation("InstructorCourseSemesters");

                    b.Navigation("News");

                    b.Navigation("QuizAnswers");

                    b.Navigation("Quizzes");

                    b.Navigation("StudentEnrollments");

                    b.Navigation("StudentInfos");

                    b.Navigation("StudentQuizGrades");

                    b.Navigation("TaskAnswers");

                    b.Navigation("Tasks");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
