// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using CRUDApi.Models;
using Microsoft.EntityFrameworkCore;
using Task = CRUDApi.Models.Task;

namespace CRUDApi.Context;

public partial class LMSContext : DbContext
{
    public LMSContext(DbContextOptions<LMSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseSemester> CourseSemesters { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Faculty> Faculties { get; set; }

    public virtual DbSet<InstructorCourseSemester> InstructorCourseSemesters { get; set; }

    public virtual DbSet<Lecture> Lectures { get; set; }

    public virtual DbSet<LectureFile> LectureFiles { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }

    public virtual DbSet<Quiz> Quizzes { get; set; }

    public virtual DbSet<QuizAnswer> QuizAnswers { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Semester> Semesters { get; set; }

    public virtual DbSet<StudentEnrollment> StudentEnrollments { get; set; }

    public virtual DbSet<StudentInfo> StudentInfos { get; set; }

    public virtual DbSet<StudentQuizGrade> StudentQuizGrades { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TaskAnswer> TaskAnswers { get; set; }

    public virtual DbSet<University> Universities { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAddress> UserAddresses { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }
    public virtual DbSet<Calendar> Calendars { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=sql.bsite.net\\MSSQL2016;Database=nabilramadan_LMS;Persist Security Info=True;TrustServerCertificate=true;User ID=nabilramadan_LMS;Password=n.1.1.2002", x => x.UseDateOnlyTimeOnly());

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.CurrentUserRole).HasDefaultValueSql("(N'')");
            entity.Property(e => e.DisplayName).HasDefaultValueSql("(N'')");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CourseId).HasName("PK__Course__8F1FF3A6DB1504CD");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Hours).HasDefaultValueSql("((0))");

            entity.HasOne(d => d.Faculty).WithMany(p => p.Courses).HasConstraintName("FK__Course__faculty___607251E5");
        });

        modelBuilder.Entity<CourseSemester>(entity =>
        {
            entity.HasKey(e => e.CycleId).HasName("PK__Course_s__5D924C1901EB9452");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Course).WithMany(p => p.CourseSemesters)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Course_se__Cours__2739D489");

            entity.HasOne(d => d.Semester).WithMany(p => p.CourseSemesters)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Course_se__Semes__2645B050");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("PK__Departme__C22220EA01691B04");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Faculty).WithMany(p => p.Departments).HasConstraintName("FK__Departmen__facul__0A9D95DB");
        });

        modelBuilder.Entity<Faculty>(entity =>
        {
            entity.HasKey(e => e.FacultyId).HasName("PK__Faculty__7B06AD84DD5251FD");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.LastSemester).WithMany(p => p.Faculties).HasConstraintName("FK__Faculty__last_se__6166761E");

            entity.HasOne(d => d.University).WithMany(p => p.Faculties).HasConstraintName("FK__Faculty__univers__06CD04F7");
        });

        modelBuilder.Entity<InstructorCourseSemester>(entity =>
        {
            entity.HasKey(e => new { e.CourseCycleId, e.InstructorId }).HasName("PK__instruct__A27700A8CD14256D");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.CourseCycle).WithMany(p => p.InstructorCourseSemesters)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__instructo__cours__24285DB4");

            entity.HasOne(d => d.Instructor).WithMany(p => p.InstructorCourseSemesters)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__instructo__instr__2334397B");
        });

        modelBuilder.Entity<Lecture>(entity =>
        {
            entity.HasKey(e => e.LectureId).HasName("PK__Lecture__797923ED7F7AD417");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.CourseCycle).WithMany(p => p.Lectures)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Lecture__course___2BFE89A6");
        });

        modelBuilder.Entity<LectureFile>(entity =>
        {
            entity.HasKey(e => e.LectureFileId).HasName("PK__Lecture___69F00415E4FDD298");

            entity.Property(e => e.LectureFileId).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Lecture).WithMany(p => p.LectureFiles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Lecture_f__lectu__2FCF1A8A");
        });

        modelBuilder.Entity<News>(entity =>
        {
            entity.HasKey(e => e.NewsId).HasName("PK__news__4C22D9E0E1CE1E8E");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Faculty).WithMany(p => p.News).HasConstraintName("FK__news__faculty_ID__2EA5EC27");

            entity.HasOne(d => d.User).WithMany(p => p.News).HasConstraintName("FK__news__user_ID__2F9A1060");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__Question__2EC9C0317399D9F2");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Quiz).WithMany(p => p.Questions).HasConstraintName("FK__Questions__quiz___47A6A41B");
        });

        modelBuilder.Entity<QuestionAnswer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK__Question__33714700833E0B49");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionAnswers).HasConstraintName("FK__Question___quest__4B7734FF");
        });

        modelBuilder.Entity<Quiz>(entity =>
        {
            entity.HasKey(e => e.QuizId).HasName("PK__Quiz__2D7357F4EB5FE8D8");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.CourseCycle).WithMany(p => p.Quizzes).HasConstraintName("FK__Quiz__course_cyc__42E1EEFE");

            entity.HasOne(d => d.Instructor).WithMany(p => p.Quizzes).HasConstraintName("FK__Quiz__instructor__43D61337");
        });

        modelBuilder.Entity<QuizAnswer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK__Quiz_ans__33714700A3212EA6");

            entity.Property(e => e.AnswerId).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.QuestionAnswers).WithMany(p => p.QuizAnswers).HasConstraintName("FK__Quiz_answ__quest__503BEA1C");

            entity.HasOne(d => d.Student).WithMany(p => p.QuizAnswers).HasConstraintName("FK__Quiz_answ__stude__4F47C5E3");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__760F998498577A3D");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Semester>(entity =>
        {
            entity.HasKey(e => e.SemesterId).HasName("PK__Semester__12459B949BF7782D");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Faculty).WithMany(p => p.Semesters).HasConstraintName("FK__Semester__facult__22751F6C");
        });

        modelBuilder.Entity<StudentEnrollment>(entity =>
        {
            entity.HasKey(e => new { e.StudentId, e.CourseCycleId }).HasName("PK__Student___718E812A36167AA0");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.CourseCycle).WithMany(p => p.StudentEnrollments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_E__cours__3493CFA7");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentEnrollments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_E__stude__339FAB6E");
        });

        modelBuilder.Entity<StudentInfo>(entity =>
        {
            entity.HasKey(e => e.AcademicId).HasName("PK__Student___CE78F2BC1C1D708B");

            entity.HasOne(d => d.Department).WithMany(p => p.StudentInfos).HasConstraintName("FK__Student_i__depar__17F790F9");

            entity.HasOne(d => d.User).WithMany(p => p.StudentInfos).HasConstraintName("FK__Student_i__user___17036CC0");
        });

        modelBuilder.Entity<StudentQuizGrade>(entity =>
        {
            entity.HasKey(e => new { e.StudentId, e.QuizId }).HasName("PK__Student___78DF1E5DF85585A2");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Quiz).WithMany(p => p.StudentQuizGrades)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_Q__quiz___55009F39");

            entity.HasOne(d => d.Student).WithMany(p => p.StudentQuizGrades)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_Q__stude__540C7B00");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.TaskId).HasName("PK__Task__049318B59168F721");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.CourseCycle).WithMany(p => p.Tasks).HasConstraintName("FK__Task__course_cyc__3864608B");

            entity.HasOne(d => d.Instructor).WithMany(p => p.Tasks).HasConstraintName("FK__Task__instructor__395884C4");
        });

        modelBuilder.Entity<TaskAnswer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK__Task_ans__3371470048AD5EBA");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Status).HasDefaultValueSql("('PENDING')");

            entity.HasOne(d => d.Student).WithMany(p => p.TaskAnswers).HasConstraintName("FK__Task_answ__stude__3E1D39E1");

            entity.HasOne(d => d.Task).WithMany(p => p.TaskAnswers).HasConstraintName("FK__Task_answ__task___3D2915A8");
        });

        modelBuilder.Entity<University>(entity =>
        {
            entity.HasKey(e => e.UniversityId).HasName("PK__Universi__F24EBB78CFEB19C5");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__users__B9BF33073B1E48F3");

            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Status).HasDefaultValueSql("('ACTIVE')");

            entity.HasOne(d => d.Faculty).WithMany(p => p.Users).HasConstraintName("FK__users__Faculty_I__1332DBDC");
        });

        modelBuilder.Entity<UserRole>(entity =>
        {
            entity.HasKey(e => new { e.RoleId, e.UserId }).HasName("PK__User_rol__1D946AB40474E7D3");

            entity.HasOne(d => d.Role).WithMany(p => p.UserRoles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User_role__role___1AD3FDA4");

            entity.HasOne(d => d.User).WithMany(p => p.UserRoles)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__User_role__user___1BC821DD");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}